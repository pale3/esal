# -*esal*- module fontconfig vim:set ft=sh:
# MODULE INFO:
MODNAME="fontconfig"
DESCRIPTION="Manage fontconfig /etc/fonts/conf.d symlinks"
MODULE_VERSION="${MODNAME} 1.0"
MODULE_PARAMETERS="enable disable list"
DEFAULT_ACTION="help"
USAGE_HELP="${ES_BINARY} ${MODNAME} <action> <options>"

# describe functions $describe_{show,list,set}
describe_enable(){
	echo "Enable specified fontconfig .conf file(s)"
}

describe_disable(){
	echo "Disable specified fontconfig .conf file(s)"
}

describe_list(){
	echo "List avaliable fontconfig .conf file(s)"
}

find_targets(){
	local targets bc i=0
	bcdirs[i]="/etc/fonts/conf.avail/*.conf"

	for bc in ${bcdirs[@]} ; do
		[[ -e ${bc} && ${bc} != *~ ]] && targets="${targets}\n$(basename ${bc})"
	done

	echo -ne ${targets} | sort -u 

}

is_enabled(){
	bcdir="/etc/fonts/conf.d"

	[[ -e ${bcdir}/${1} ]] || return 1
	return 0

}

do_list(){
	local s
	targets=( $(find_targets) )
		emsg "Avaliable fontconfig .conf file(s) (enabled is ${B}*${N}${G}):${N}"
	
	for (( s=0; n < ${#targets[@]}; ++s )); do
	is_enabled ${targets[s]} && targets[s]="${targets[s]} ${B}*${N} "
			write_numbered_output -h "${targets[s]}" 
	
	done

	return 0
}

do_enable() {
	local bc bcdir="/etc/fonts/conf.d"

	[[ -z ${1} ]] && die -q "You didn't specify any .conf files to enable"

	# create directory if necessary
	if [[ ! -d ${bcdir} && -w $(dirname ${bcdir}) ]] ; then
		mkdir ${bcdir} || die -m "Failed to create ${bcdir}"
	elif [[ ! -d ${bcdir} ]] ; then
		die -m "You don't have permission to create ${bcdir}"
	fi

	# make sure we have proper permissions
	[[ -w ${bcdir} ]] || \
		die -m "You don't have permission to write to ${bcdir}"

	targets=( $(find_targets) )

	for bc in ${@:3} ; do
		local file target=${bc}

		is_number "${target}" && \
			target=${targets[$(( ${target} - 1 ))]}

		[[ -z "${target}" ]] && \
			die -m "Target \"${bc}\" doesn't appear to be valid!"

		bc=${target}

		# ignore any unrecognized options
		[[ ${bc} == --* ]] && continue

		# what form is the argument in?
		case "${bc}" in
			# absolute path
			/*)
				file="/${bc}"
				;;
			# relative path
			*/*)
				file="/${PWD}/${bc}"
				;;
			# no path
			*)
				# CWD
				if [[ -f ${bc} ]] ; then
					file="/${PWD}/${bc}"
				# assume /etc/fonts/conf.avail
				elif [[ -f /etc/fonts/conf.avail/${bc} ]]
				then
					file="/etc/fonts/conf.avail/${bc}"
				else
					if [[ -n "${ES_FONTCONFIG_DIRS}" ]] ; then
						for x in ${ES_FONTCONFIG_DIRS} ; do
							[[ -f ${x}/${bc} ]] && file="${x}/${bc}"
						done
					fi

					[[ -e ${file} ]] || \
						file="/etc/fonts/conf.avail/${bc}"
				fi
				;;
		esac

		# does it exist?
		if [[ ! -e ${file} ]] ; then
			msg "${file} doesn't exist"
			continue
		fi

		# already installed?
		if [[ -e ${bcdir}/$(basename ${bc}) ]] ; then
			msg "$(basename ${bc}) is already installed"
			continue
		fi

		# finally, create the symlink
		ln -s "${file}" "${bcdir}" || \
			die -m "Failed to create symlink from '${file}' to '${bcdir}'"
	done
}

do_disable() {
	local bc bcdir="/etc/fonts/conf.d"

	[[ -z ${1} ]] && die -m "You didn't specify any .conf files to disable"

	targets=( $(find_targets) )

	for bc in ${@:3} ; do
		local file target=${bc}

		is_number "${target}" && \
			target=${targets[$(( ${target} - 1 ))]}

		[[ -z "${target}" ]] && \
			die -m "Target \"${bc}\" doesn't appear to be valid!"

		bc=${target}
		file="${bcdir}/${bc}"

		# ignore any unrecognized options
		[[ ${bc} == --* ]] && continue

		# is in installed?
		if [[ ! -e ${file} ]] ; then
			msg "${bc} is not installed"
			continue
		fi

		# remove it if we have permissions
		if [[ -w $(dirname ${file}) ]] ; then
			rm "${file}" || die -q "Failed to remove ${file}"
		else
			die -m "You don't have permission to remove ${file}"
		fi
	done
}

do_help(){
	echo "$DESCRIPTION"
	echo "Usage: $USAGE_HELP"
	show_default_usage "actions"
	emsg "Extra actions:"
	show_module_desc
}

do_usage(){
	echo "Usage: $USAGE_HELP"
}

do_version(){
	echo ":: ${MODULE_VERSION}"
}
